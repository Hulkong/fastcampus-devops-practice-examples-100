# Here's a breakdown of what it does:

#   It triggers manually using the workflow_dispatch event.
#   It runs the jobs on the latest version of Ubuntu.
#   It uses a matrix strategy to test against a single version of Node.js (14.x).
#   It checks out your repository using actions/checkout@v2.
#   It installs dependencies without caching them, which means it will download all dependencies every time it runs, slowing down the workflow.
#   It runs tests and builds in separate steps, which can be slower than running them in parallel or in a single step.
#   It doesn't build or push a Docker image, which could be part of a more efficient workflow if your application is containerized.
#   If you want to make this workflow more efficient, you could cache dependencies, run tests and builds in parallel or in a single step, and build and push a Docker image if applicable.

name: Node.js CI(느린 예시)

on:
  workflow_dispatch:
    inputs:
      imageVersion:
        description: 'Image Version'
        required: true
        default: 'latest'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        path: '02-강의준비/08-실무미션'

    # Node.js 12.x
    - name: Use Node.js 12.x
      uses: actions/setup-node@v2
      with:
        node-version: '12.x'
    - name: Install Dependencies
      working-directory: '02-강의준비/08-실무미션'
      run: npm install
    - name: Run Test
      working-directory: '02-강의준비/08-실무미션'
      run: npm test

    # Node.js 14.x
    - name: Use Node.js 14.x
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
    - name: Install Dependencies
      working-directory: '02-강의준비/08-실무미션'
      run: npm install
    - name: Run Test
      working-directory: '02-강의준비/08-실무미션'
      run: npm test

    # Node.js 16.x
    - name: Use Node.js 16.x
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'
    - name: Install Dependencies
      working-directory: '02-강의준비/08-실무미션'
      run: npm install
    - name: Run Test
      working-directory: '02-강의준비/08-실무미션'
      run: npm test

    # Docker 이미지 빌드
    - name: Build Docker image
      working-directory: '02-강의준비/08-실무미션'
      run: docker build . --file Dockerfile --build-arg VERSION=${{ github.event.inputs.imageVersion }} --tag hulkong/fastcampus-devops-practice-examples-100:part02-08-senario-${{ github.event.inputs.imageVersion }}

    # Docker login 후, Docker Hub에 Image를 push
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}


    # Docker 이미지 푸시 단계를 생략함
    # DOCKER_USERNAME과 DOCKER_PASSWORD는 GitHub Secrets에 저장해야 함
    - name: Push Docker image
      working-directory: '02-강의준비/08-실무미션'
      run: docker push hulkong/fastcampus-devops-practice-examples-100:part02-08-senario-${{ github.event.inputs.imageVersion }}