name: 빠른 예시 CI

on:
  workflow_dispatch:
    inputs:
      imageVersion:
        description: 'Image Version'
        required: true
        default: 'latest'

env:
  REGISTRY_IMAGE: hulkong/fastcampus-devops-practice-examples-100

jobs:
  build:
    defaults:
      run:
        working-directory: '02-강의준비/08-실무미션'
    runs-on: ubuntu-latest
    # 빌드속도 개선 1: 플랫폼을 병렬로 빌드하므로 빌드속도가 빨라집니다.
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v7
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Install Dependencies
        run: npm install

      - name: Run Test
        run: npm test


      # 도커 빌드 및 푸시를 진행합니다. 병렬적으로 빌드하므로 빌드속도가 빠릅니다.
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: raw,value=part02-08-senario-${{ github.event.inputs.imageVersion }}
          flavor: |
            latest=false
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: '02-강의준비/08-실무미션'
          file: '02-강의준비/08-실무미션/Dockerfile.optimize2'
          platforms: ${{ matrix.platform }}
          labels: part02-08-senario-${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            VERSION=${{ github.event.inputs.imageVersion }}
          # 빌드속도 개선 2: 레이어 캐시를 사용하여 빌드속도를 높입니다. 두 번째 빌드시 레이어 캐시를 사용하여 빌드 속도가 빨라집니다.
          cache-from: type=gha,scope=build-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.platform }}
      
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # 상위 job에서 빌드된 이미지를 병합하여 manifest list를 생성하고, 이미지를 최종적으로 업로드합니다.
  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: raw,value=part02-08-senario-${{ github.event.inputs.imageVersion }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}