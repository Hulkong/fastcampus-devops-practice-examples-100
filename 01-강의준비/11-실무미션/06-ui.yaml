---
# Source: ui/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-0.0.1
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
# Source: ui/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ui
data:
  ENDPOINTS_CATALOG: http://catalog
  ENDPOINTS_CARTS: http://carts
  ENDPOINTS_CHECKOUT: http://checkout
  ENDPOINTS_ORDERS: http://orders
  ENDPOINTS_ASSETS: http://assets
---
# Source: ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ui
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-type: external
  labels:
    helm.sh/chart: ui-0.0.1
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
---
# Source: ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-0.0.1
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: ui
      app.kubernetes.io/instance: ui
      app.kubernetes.io/component: service
      app.kuberneres.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: ui
        app.kubernetes.io/instance: ui
        app.kubernetes.io/component: service
        app.kuberneres.io/owner: retail-store-sample
    spec:
      serviceAccountName: ui
      securityContext:
        fsGroup: 1000
      # Graceful shutdown을 위한 설정1
      # terminationGracePeriodSeconds: 90
      containers:
        - name: ui
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
          envFrom:
            - configMapRef:
                name: ui
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-ui:0.7.1"
          imagePullPolicy: IfNotPresent
          # Graceful shutdown을 위한 설정2
          # lifecycle:
          #   preStop:
          #     exec:
          #       command:
          #         - /bin/sh
          #         - "-c"
          #         - sleep 80
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          # Spring actuator는 외부 라이브러리의 health check도 진행하기에 예상치 못한 이슈가 발생할 수 있으니, 완벽한 통제 내에 없으면 사용하지 않는 것을 추천
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 3

          # 서비스의 가용성을 높이기 위해서 readinessProbe 활용하자!
          # readinessProbe:
          #   httpGet:
          #     path: /actuator/health/readiness
          #     port: 8080
          #   initialDelaySeconds: 45
          #   periodSeconds: 3

          # 차후 모니터링을 통해서, 리소스 limit과 requets의 임계치를 동일하게 설정하여 QoS를 guaranteed로 설정하자!
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 128m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
