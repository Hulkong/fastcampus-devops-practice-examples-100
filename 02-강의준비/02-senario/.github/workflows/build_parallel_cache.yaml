# Here's a breakdown of what it does:

#   It triggers manually using the workflow_dispatch event.
#   It runs the jobs on the latest version of Ubuntu.
#   It uses a matrix strategy to test against multiple versions of Node.js (12.x, 14.x, 16.x).
#   It checks out your repository using actions/checkout@v2.
#   It sets up the Node.js version using actions/setup-node@v1.
#   It caches dependencies using actions/cache@v2, which means it will download dependencies only if the package-lock.json file changes.
#   It installs dependencies and runs tests.
#   It has a placeholder for a "Build and Push Docker Image" job, but the job doesn't have any steps. If you want to build and push a Docker image, you need to add steps to do so.

name: Node.js CI(빠른 예시)

on:
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x] # 병렬 테스트를 위해 여러 Node.js 버전을 사용

    # 소스 코드 체크아웃
    steps:
    - uses: actions/checkout@v2

    # Node.js 버전 설정
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    # 의존성 캐싱
    - uses: actions/checkout@v2
    - name: Cache node modules
      id: node-cache
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    - name: Install Dependencies
      if: steps.node-cache.outputs.cache-hit != 'true'
      run: npm install

    # 테스트 실행
    - name: Run Tests
      run: npm test

  # 테스트 작업이 성공한 후 실행
  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # Docker 이미지 빌드
    - name: Build Docker image
      run: docker build . --file Dockerfile --tag myapp:${{ github.sha }}

    # Docker 이미지 푸시 단계를 생략함
    # DOCKER_USERNAME과 DOCKER_PASSWORD는 GitHub Secrets에 저장해야 함
    # - name: Push Docker image
    #   run: |
    #     echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    #     docker push myapp:${{ github.sha }}
